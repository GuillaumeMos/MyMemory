{"version":3,"sources":["images/card_back.png","index.js"],"names":["Square","className","onClick","this","props","displayed","src","image","alt","logo","React","Component","Board","state","board","setupBoard","count","items","setupItems","enabled","first","second","chrono","chronoInterval","setInterval","setState","score","i","validated","txt","toString","push","Math","floor","array","temporaryValue","randomIndex","currentIndex","length","random","shuffle","clearInterval","itemId","handleSquareClick","filter","element","setTimeout","hasWon","cookies","Cookies","set","username","newScore","hasNiceTime","parseInt","status","userScore","get","boardItems","map","_","index","renderSquare","players","Object","entries","getAll","el","startsWith","name","replace","scoreBoard","resetGame","Game","difficulty","ready","renderLogin","type","value","onChange","event","target","gameBoard","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fecb8306.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/card_back.2d508119.png\";","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport logo from './images/card_back.png'\r\nimport Cookies from 'universal-cookie';\r\n\r\n\r\n\r\nclass Square extends React.Component {\r\n    render() {\r\n        return (\r\n            <button className=\"square\" onClick={this.props.onClick}>\r\n                {this.props.displayed ? <img src={this.props.image} alt=\"Logo\" /> : <img src={logo} alt=\"Logo\" />}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            board: this.setupBoard(props.count),\r\n            items: this.setupItems(props.count),\r\n\r\n            enabled: true,\r\n            first: null,\r\n            second: null,\r\n\r\n            chrono: 0,\r\n            chronoInterval: setInterval(() => {\r\n                this.setState((state) => state.chrono++)\r\n            }, 1000),\r\n            score: 0,\r\n        };\r\n    }\r\n\r\n    setupItems(count) {\r\n        const items = [];\r\n        for (let i = 0; i < count; i++) {\r\n            items[i] = {\r\n                validated: false,\r\n                txt: i.toString(),\r\n                image: `/images/card_${i}.jpg`,\r\n            }\r\n        }\r\n        return items;\r\n    }\r\n\r\n    setupBoard(count) {\r\n        let board = [];\r\n        for (let i = 0; i < count * 2; i++) {\r\n            board.push(Math.floor(i / 2));\r\n        }\r\n        board = shuffle(board);\r\n        return board;\r\n    }\r\n\r\n    hasNiceTime(count, chrono) {\r\n        return (count === 4 && chrono <= 10)\r\n            || (count === 7 && chrono <= 20)\r\n            || (count === 10 && chrono <= 30)\r\n    }\r\n\r\n    resetGame() {\r\n        clearInterval(this.state.chronoInterval)\r\n        this.setState({\r\n            board: this.setupBoard(this.props.count),\r\n            items: this.setupItems(this.props.count),\r\n\r\n            enabled: true,\r\n            first: null,\r\n            second: null,\r\n\r\n            chrono: 0,\r\n            chronoInterval: setInterval(() => {\r\n                this.setState((state) => state.chrono++)\r\n            }, 1000),\r\n            score: 0,\r\n        });\r\n    }\r\n\r\n    renderSquare(i) {\r\n        const itemId = this.state.board[i];\r\n        return (\r\n            <Square key={i} txt={this.state.items[itemId].txt} image={this.state.items[itemId].image}\r\n                displayed={this.state.items[itemId].validated === true || this.state.first === i || this.state.second === i}\r\n                onClick={() => this.handleSquareClick(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    hasWon() {\r\n        return this.state.items.filter((element) => !element.validated).length === 0;\r\n    }\r\n\r\n    handleSquareClick(i) {\r\n        if (!this.state.enabled || this.state.first === i || this.state.items[this.state.board[i]].validated) {\r\n            return;\r\n        }\r\n\r\n        const state = this.state;\r\n        if (state.first === null) {\r\n            state.first = i;\r\n            this.setState(state)\r\n        } else {\r\n            state.second = i;\r\n\r\n            const itemId = state.board[state.first];\r\n            if (itemId === state.board[state.second]) {\r\n                state.items[itemId].validated = true;\r\n                state.first = null;\r\n                state.second = null;\r\n                state.score += 3;\r\n\r\n                this.setState(state)\r\n            } else {\r\n                state.enabled = false;\r\n                state.score -= 1;\r\n\r\n                this.setState(state)\r\n                setTimeout(() => {\r\n                    state.first = null;\r\n                    state.second = null;\r\n                    state.enabled = true;\r\n                    this.setState(state)\r\n                }, 1000)\r\n            }\r\n        }\r\n\r\n        if (this.hasWon()) {\r\n            clearInterval(this.state.chronoInterval);\r\n\r\n            const cookies = new Cookies();\r\n            cookies.set(\r\n                `user_time_${this.props.username}`,\r\n                this.state.chrono,\r\n            );\r\n\r\n            let newScore = this.state.score;\r\n            if (this.hasNiceTime(parseInt(this.props.count, 10), this.state.chrono)) {\r\n                newScore += 5;\r\n                this.setState((state) => state.score += 5);\r\n            }\r\n\r\n            cookies.set(\r\n                \"last_user_score\",\r\n                newScore,\r\n            );\r\n            cookies.set(\r\n                `user_score_` + this.props.username,\r\n                newScore,\r\n            );\r\n\r\n            this.setState((state) => state.enabled = false)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const cookies = new Cookies();\r\n        const hasWon = this.hasWon();\r\n        let status;\r\n\r\n        if (hasWon) {\r\n            status = 'GG bro';\r\n        } else {\r\n            const userScore = cookies.get(\"last_user_score\");\r\n            status = `Hey ${this.props.username}, bonne chance ! `;\r\n            status += (userScore != null ? `Le dernier score est ${userScore}` : 'Il n\\'y pas de score enregistré');\r\n        }\r\n\r\n        const boardItems = this.state.board.map((_, index) => {\r\n            return this.renderSquare(index)\r\n        })\r\n\r\n        const players = Object.entries(cookies.getAll())\r\n            .filter((el) => el[0].startsWith('user_score_'))\r\n            .map((el) => {\r\n                const name = el[0].replace('user_score_', '');\r\n                return (<tr key={name}><td>{name}</td><td>{el[1]}</td><td>{cookies.get(`user_time_${name}`)}s</td></tr>)\r\n            })\r\n\r\n        const scoreBoard = hasWon ? (\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Nom</th>\r\n                        <th>Score</th>\r\n                        <th>Temps</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {players}\r\n                </tbody>\r\n            </table>\r\n        ) : ''\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"status\">{status}</div>\r\n                <div className=\"status\">Score : {this.state.score}</div>\r\n                <div className=\"status\">Temps actuel : {this.state.chrono}s</div>\r\n                <button onClick={() => this.resetGame()}>Reset</button>\r\n                <div>{scoreBoard}</div>\r\n                <div className=\"board-row\">\r\n                    {boardItems}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: null,\r\n            difficulty: null,\r\n            ready: false,\r\n        };\r\n    }\r\n\r\n    gameBoard() {\r\n        if (this.state.ready) {\r\n            return <Board username={this.state.username} count={this.state.difficulty} />\r\n        } else {\r\n            return this.renderLogin()\r\n        }\r\n    }\r\n\r\n    renderLogin() {\r\n        return (\r\n            <div>\r\n                <input type=\"text\" name=\"username\" value={this.state.username ?? ''} onChange={(event) => {\r\n                    this.setState((state) => state.username = event.target.value)\r\n                }} />\r\n                <select value={this.state.difficulty ?? 0} onChange={(event) => {\r\n                    this.setState((state) => state.difficulty = event.target.value)\r\n                }}>\r\n                    <option value=\"0\">Sélectionner une difficulté</option>\r\n                    <option value=\"4\">Facile</option>\r\n                    <option value=\"7\">Moyen</option>\r\n                    <option value=\"10\">Difficile</option>\r\n                </select>\r\n                <button onClick={() => {\r\n                    if (this.state.difficulty && this.state.difficulty > 0 && this.state.username) {\r\n                        this.setState((state) => state.ready = true)\r\n                    }\r\n                }}>GO</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    {this.gameBoard()}\r\n                </div>\r\n\r\n                <div className=\"game-info\">\r\n                    <div>{/* status */}</div>\r\n                    <ol>{/* TODO */}</ol>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction shuffle(array) {\r\n    var currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n\r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n\r\n        // And swap it with the current element.\r\n        temporaryValue = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return array;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n"],"sourceRoot":""}